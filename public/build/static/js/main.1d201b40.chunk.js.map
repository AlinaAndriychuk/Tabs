{"version":3,"sources":["serviceWorker.js","Functions/onChange.js","Functions/renderTab.js","Components/Slider.js","index.js"],"names":["Boolean","window","location","hostname","match","onChange","value","pageWidth","document","querySelector","clientWidth","gsap","to","right","renderTab","options","className","key","onClick","label","Slider","props","map","item","ReactDOM","render","Fragment","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCXSC,MALf,SAAkBC,GAChB,IAAMC,EAAYC,SAASC,cAAc,iBAAiBC,YAC1DC,IAAKC,GAAG,2BAA4B,CAACC,MAAON,GAAaD,EAAQ,MCOpDQ,MARf,SAAmBC,GACjB,OACE,wBAAIC,UAAU,cAAcC,IAAKF,EAAQT,MAAOY,QAAS,kBAAMb,EAASU,EAAQT,SAC7ES,EAAQI,QC4BAC,MA/Bf,SAAgBC,GACd,OACE,yBAAKL,UAAU,UACb,wBAAIA,UAAU,0BAEVK,EAAMN,QAAQO,KAAK,SAACC,GAClB,OAAOT,EAAUS,OAIvB,yBAAKP,UAAU,2BACb,yBAAKA,UAAU,oCACb,wBAAIA,UAAU,iBAAd,WAIF,yBAAKA,UAAU,kCACb,wBAAIA,UAAU,iBAAd,WAIF,yBAAKA,UAAU,qCACb,wBAAIA,UAAU,iBAAd,cChBVQ,IAASC,OACP,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,CAAQX,QAJI,CAAC,CAAET,MAAO,IAAKa,MAAO,WAAY,CAAEb,MAAO,IAAKa,MAAO,WAAY,CAAEb,MAAO,IAAKa,MAAO,iBAMtGX,SAASmB,eAAe,cJsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1d201b40.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import gsap from 'gsap';\r\n\r\nfunction onChange(value) {\r\n  const pageWidth = document.querySelector('.slider__page').clientWidth;\r\n  gsap.to('.slider__pages-container', {right: pageWidth * (value - 1)});\r\n};\r\n\r\nexport default onChange;","import React from 'react';\r\nimport onChange from './onChange';\r\n\r\nfunction renderTab(options) {\r\n  return (\r\n    <li className=\"slider__tab\" key={options.value} onClick={() => onChange(options.value)}>\r\n      {options.label}\r\n    </li>\r\n  )\r\n};\r\n\r\nexport default renderTab;","import React from 'react';\r\nimport renderTab from '../Functions/renderTab';\r\n\r\nfunction Slider(props) {\r\n  return (\r\n    <div className=\"slider\">\r\n      <ul className=\"slider__tabs-container\">\r\n        {\r\n          props.options.map( (item) => {\r\n            return renderTab(item)\r\n          })\r\n        }\r\n      </ul>\r\n      <div className=\"slider__pages-container\">\r\n        <div className=\"slider__page slider__page--green\">\r\n          <h1 className=\"slider__title\">\r\n            Page 1\r\n          </h1>\r\n        </div>\r\n        <div className=\"slider__page slider__page--red\">\r\n          <h1 className=\"slider__title\">\r\n            Page 2\r\n          </h1>\r\n        </div>\r\n        <div className=\"slider__page slider__page--yellow\">\r\n          <h1 className=\"slider__title\">\r\n            Page 3\r\n          </h1>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Slider;","\"use-strict\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.sass';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Slider from './Components/Slider';\r\n\r\nconst options = [{ value: '1', label: 'Tab One'}, { value: '2', label: 'Tab Two'}, { value: '3', label: 'Tab Three'}]\r\n\r\nReactDOM.render(\r\n  <React.Fragment>\r\n    <Slider options={options}></Slider>\r\n  </React.Fragment>,\r\n  document.getElementById('container')\r\n);\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}